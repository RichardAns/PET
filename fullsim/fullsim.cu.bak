// start very simple cylindrical geom
#pragma warning( disable : 4267)   // size_t int mismatch 
#pragma warning( disable : 4244)   // thrust::reduce int mismatch

#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include "thrust/host_vector.h"
#include "thrust/device_vector.h"
#include "helper_cuda.h"
#include <curand_kernel.h> 

#include <stdio.h>
#include <stdlib.h>
#include <random>

//#include "mystuff.h"
#include "cx.h"
#include "timers.h"

// Parameterise Scanner NB lengths in mm
constexpr int    cryNum     = 400;   // number of crystals in one ring
constexpr float  crySize    = 4.0f;  // size of square face
constexpr float  cryDepth   = 20.0f; // depth of crystal 
constexpr int    cryDiffMin = 100;   // min tranverse length of lor
constexpr int    cryDiffMax = 300;   // max transverse length of lor
constexpr float  cryStep    = (float)cryNum/cx::pi2<float>; // map phi to crystal
constexpr float  phiStep    = cx::pi2<float>/(float)cryNum; // map crystal to phi 

constexpr int    detRings  = 128;               // number of rings
constexpr float  detRadius = 254.648f;         // radius of rings (detemined by cryNum and crySize)
constexpr float  detLen =    crySize*detRings; // axial length (max allowed z)
constexpr float  detStep =   1.0f/crySize;     // map z to ring

constexpr float  roiRadius = 200.0f;               // max radius for roi
constexpr int    voxNum  = 200;                    // voxel transverse number
constexpr float  voxSize  = 2.0f*roiRadius/voxNum; // voxel transverse size
constexpr float  voxStep  = 1.0f/voxSize;      // map tranverse distance to voxel

constexpr size_t mapSlice = cryNum*detRings/2;   // for sinogram maps enourmous
constexpr int    spotNphi = 24;                   // sinogram spot max phi size
constexpr int    spotNz = 24;                    // sinogram spot max z size

struct Lor {
	int z1;
	int c1;
	int z2;
	int c2;
};

struct Ray {
	float3 a;
	float3 n;
	float lam1;
	float lam2;
};


struct Roi {
	float2 z;
	float2 r;
	float2 phi;
};

// for clockwise phi rotation with phi= 0 at 12 oclock (+ve y axis)
// use with y =cos(phi) x = sin(phi)
template <typename T> __host__ __device__ T myatan2(T x,T y){
	T angle = atan2(x,y);
	if(angle <0) angle += cx::pi2<T>;
	return angle;
}

__host__ __device__ int phi2cry(float phi)
{
	while(phi < 0.0f) phi += cx::pi2<float>;
	while(phi >= cx::pi2<float>) phi -= cx::pi2<float>;
	return (int)( phi*cryStep );
}

__host__ __device__ float cry2phi(int cry)
{
	while(cry < 0) cry += cryNum;
	while(cry >= cryNum) cry -= cryNum;
	return ( (float)cry+0.5f )*phiStep;  // phi at crystal centre
}

// indexing modulo Range, assumes i is within interval
template <int Step, int Range> __host__ __device__ int sub_cyc(cint i)
{
	return i >= Step ? i-Step : i-Step+Range;
}

template <int Step, int Range> __host__ __device__ int add_cyc(cint i)
{
	return i+Step < Range  ? i+Step : i+Step-Range;
}

__device__ int myatomicAdd16(ushort *buf)
{
	ushort oldval = buf[0];
	ushort current = 0;
	do {
		current = oldval;
		oldval = atomicCAS(buf,current,current+1);
	} while (current != oldval);

	return (current == 65535) ? 1 : 0;  // overflow bit ?
}

__device__ int ray_to_cyl(Ray &g,Lor &l)
{
	//swim to cyl: slove quadratic
	float A = g.n.x*g.n.x + g.n.y*g.n.y;
	float B = g.a.x*g.n.x + g.a.y*g.n.y;  // factors of 2 ommited as they cancel
	float C = g.a.x*g.a.x + g.a.y*g.a.y - detRadius*detRadius;
	float D = B*B-A*C;
	float rad = sqrtf(D);
	g.lam1 = (-B+rad)/A;  // gamma1
	float z1 = g.a.z+g.lam1*g.n.z;
	g.lam2 = (-B-rad)/A;  // gamma2
	float z2 = g.a.z+g.lam2*g.n.z;  

	if(z1 >= 0.0f && z1 < detLen && z2 >= 0.0f && z2 < detLen && abs(z2-z1)<detLen/2 ){  // last for double length detector
		float x1  = g.a.x+g.lam1*g.n.x;
		float y1  = g.a.y+g.lam1*g.n.y;
		float phi = myatan2(x1,y1);
		l.z1 = min(detRings-1,(int)(z1*detStep)   );
		l.c1 = phi2cry(phi);   //min(cryNum-1,(int)(phi*cryStep));
		float x2  = g.a.x+g.lam2*g.n.x;
		float y2  = g.a.y+g.lam2*g.n.y;
		phi = myatan2(x2,y2);
		l.z2 = min(detRings-1,  (int)(z2*detStep)   );
		l.c2 = phi2cry(phi);  //min(cryNum-1,(int)(phi*cryStep));

		if(l.z1 > l.z2){
			cx::swap(l.z1,l.z2);
			cx::swap(l.c1,l.c2);
		}
		else if(l.z1==l.z2 && l.c1 > l.c2) cx::swap(l.c1,l.c2);
		return 1;
	}

	return 0;
}

template <typename S> __global__ void init_generator(long long seed,S *states)
{
	// minimal version
	int id = threadIdx.x + blockIdx.x*blockDim.x;
	curand_init(seed + id, 0, 0, &states[id]);  
	//curand_init(seed, id , 0, &states[id]);  
}

__device__ __host__ float3 roi2xyz(Roi &v)
{
	float3 a;
	float phi = 0.5f*(v.phi.y+v.phi.x);   // averge phi
	float rxy = 0.5f*(v.r.y+v.r.x);       // distance from z axis
	a.x = rxy*sinf(phi);                  // centre of voxel
	a.y = rxy*cosf(phi);
	a.z = 0.5f*(v.z.y+v.z.x);           // average z
	printf("Roi  phi (%7.3f %7.3f) r (%7.1f %7.1f) z (%7.1f %7.1f) a (%8.2f %8.2f %8.2f)\n",v.phi.x,v.phi.y,v.r.x,v.r.y,v.z.x,v.z.y,a.x,a.y,a.z);
	return a;
}

__global__ void find_spot(r_Ptr<uint> map,r_Ptr<uint> spot,Roi vox)
{
	float c_id = threadIdx.x; // crystal
	float z_id = blockIdx.x;  // z
	if(c_id >= cryNum) return;
	if(z_id >= detRings/2) return;
	Ray r; 
	float phi = (cx::pi2<float>/cryNum)*(c_id+0.5f);
	r.a.x = detRadius*sinf(phi);  // centre of crystal
	r.a.y = detRadius*cosf(phi);  // phi = 0 along y axis increasing clockwise
	r.a.z = crySize*(z_id+0.5f);
	
	phi = 0.5f*(vox.phi.y+vox.phi.x);   // averge phi
	float rxy = 0.5f*(vox.r.y+vox.r.x); // distance from z axis
	r.n.x = rxy*sinf(phi);              // centre of voxel
	r.n.y = rxy*cosf(phi);
	r.n.z = 0.5f*(vox.z.y+vox.z.x);     // average z
	// find lam such that a+ lam*b hits cyl
	r.lam2 = -2.0f*(r.a.x*r.n.x + r.a.y*r.n.y-detRadius*detRadius)/((r.n.x-r.a.x)*(r.n.x-r.a.x) + (r.n.y-r.a.y)*(r.n.y-r.a.y));
	float3 b; // centre of crytal cluster for this lor family
	b.x = r.a.x+r.lam2*(r.n.x-r.a.x);
	b.y = r.a.y+r.lam2*(r.n.y-r.a.y);
	b.z = r.a.z+r.lam2*(r.n.z-r.a.z);
	phi = myatan2(b.x,b.y);
	int c = phi2cry(phi);
	int z = b.z/crySize -detRings/2;
	if(z < 0) printf("unexpected z = %d in find_spot\n",z);
	
    z = min(detRings/2-1, z);  // spot z in valid range (does not have to be)
	z = max(0, z);
	// copy hits to spot map
 	size_t m_slice = (z_id*cryNum+c_id)*mapSlice;
	size_t s_slice = (z_id*cryNum+c_id)*spotNphi*spotNz;

	int sz = max(0,z-(2*spotNz/3));
	for(int iz=0;iz<spotNz;iz++){
		int sc = sub_cyc<spotNphi/2,cryNum>(c);
		for(int ic = 0;ic<spotNphi;ic++){
			uint val =map[m_sclice+sz*cryNum+sc];
			spot[s_slice+iz*spotNphi+ic] =val;
			sc = add_cyc<1,cryNum>(sc);
		}
		sz++;
		if (sz >= detRings/2) break;
	}
	spot[s_index] = sz;
	spot[s_index+spotNphi] = sub_cyc<spotNphi/2,cryNum>(c);
	//map[index + (z*cryNum+c)]    = 0;  // mark centre for debug

	//size_t index = (z_id*cryNum+c_id)*mapSlice;
	//if(c_id==205 && z_id==36) printf("c %3d z %2d rxy %.3f ,lam2 %.6f a (%.3f %.3f %.3f) n (%.3f %.3f %.3f) b (%.3f %.3f %.3f)\n",
	//	          c,z,rxy,r.lam2, r.a.x,r.a.y,r.a.z, r.n.x,r.n.y,r.n.z, b.x,b.y,b.z);
	//z = max(0,z); 
	//map[index + (48*cryNum+200)] = c;
	//map[index + (49*cryNum+200)] = z;

}

template <typename S> __global__ void cylhits(r_Ptr<uint> hits,r_Ptr<uint> map,r_Ptr<ushort> vfill,r_Ptr<double> ngood, Roi roi,S *states,uint tries)
{
	int id = threadIdx.x + blockIdx.x*blockDim.x;
	S state = states[id];
	//float4 a;
	//float4 n;
	Ray g;
	Lor lor;
	int good = 0;
	float r1sq = roi.r.x*roi.r.x;
	float r2sq = roi.r.y*roi.r.y-r1sq;
	float dphi = roi.phi.y-roi.phi.x;
	float dz =   roi.z.y-roi.z.x;
	for(int k=0;k<tries;k++){
		// generate point in roi
		float phi = roi.phi.x + dphi*curand_uniform(&state);
		float r =   sqrtf(r1sq +r2sq*curand_uniform(&state));			
		g.a.x = r*sinf(phi);
		g.a.y = r*cosf(phi);
		g.a.z = roi.z.x + dz*curand_uniform(&state);
		if(0){  // save generated decay points debug only
			int3 p;
			p.x = (int)((g.a.x+roiRadius)*voxStep);
			p.y = (int)((g.a.y+roiRadius)*voxStep);
			p.z = (int)(g.a.z*detStep);
			p.z = min(detRings-1,p.z);
			//if(id==0) printf("r %f phi %f a.x %f a.y %f a.z %f voxel %d %d %d\n",r,phi,a.x,a.y,a.z,ax,ay,az);
			if(p.x <0 || p.x >= voxNum || p.y < 0 || p.y >= voxNum || p.z < 0 || p.z >= detRings) printf("bad roi %d %d %d\n",p.x,p.y,p.z); 
			else myatomicAdd16(&vfill[(p.z*voxNum+p.y)*voxNum+p.x]); 
		    //else atomicAdd(&vfill[(p.z*roi.nxy+p.y)*roi.nxy+p.x],1); 
			//else vfill[(az*roi.nxy+ay)*roi.nxy+ax] += 1; 
		}
		// generate isotropic back to back gammas
		phi = cx::pi2<float>*curand_uniform(&state);
		float theta = acosf(1.0f-2.0f*curand_uniform(&state));
		g.n.x = sinf(phi)*sinf(theta);
		g.n.y = cosf(phi)*sinf(theta);
		g.n.z = cosf(theta);
		if(ray_to_cyl(g,lor)){
			good++;
			//if(id==0 && good<100) printf("%3d (%3d %3d)-(%3d %3d) phi %7.2f theta %7.2f\n",good,lor.z1,lor.c1,lor.z2,lor.c2,phi*180.0f/cx::pi<float>,theta*180.0f/cx::pi<float> );
			//if(lor.c1==205 && lor.z1==36) {
			//	printf("%3d lor (%3d %3d)-(%3d %3d) phi %7.2f theta %7.2f g.a (%6.1f %6.1f %6.1f) g.n (%6.3f %6.3f %6.3f)\n",good,lor.z1,lor.c1,lor.z2,lor.c2,phi*180.0f/cx::pi<float>,theta*180.0f/cx::pi<float>,g.a.x,g.a.y,g.a.z,g.n.x,g.n.y,g.n.z );
			//}
			if(0){  // more debug
				atomicAdd(&hits[lor.c1*detRings+lor.z1],1);  // all lors in single plane
				atomicAdd(&hits[lor.c2*detRings+lor.z2],1);
				int3 p;
				p.x = (int)((g.a.x+detRadius)*voxStep);
				p.y = (int)((g.a.y+detRadius)*voxStep);
				p.z = (int)(g.a.z*detStep);
				p.z = min(detRings-1,p.z);
				//if(id==0) printf("r %f phi %f a.x %f a.y %f a.z %f voxel %d %d %d\n",r,phi,a.x,a.y,a.z,ax,ay,az);
				if(p.x <0 || p.x >= voxNum || p.y < 0 || p.y >= voxNum || p.z < 0 || p.z >= detRings) printf("bad roi %d %d %d\n",p.x,p.y,p.z); 
				//else atomicAdd(&vfill[(p.z*roi.nxy+p.y)*roi.nxy+p.x],1); //needs atomic
				//else vfill[(p.z*roi.nxy+p.y)*roi.nxy+p.x] += 1; //needs atomic
			}
			if(1){
				if(lor.z2<detRings/2) printf("unexpected z2 = %d\n",lor.z2);
				uint lor2sub = max(0,lor.z2-detRings/2);
				if(lor.z1 <1) printf("unexpected z1 = %d\n",lor.z1);
				uint lor1sub = max(0,lor.z1-1);
				size_t index = (lor1sub*cryNum+lor.c1)*mapSlice+(lor2sub*cryNum+lor.c2);
				//size_t index = (lor.z1*cryNum+lor.c1)*mapSlice+(lor.z2*cryNum+lor.c2);
				atomicAdd(&map[index],1);
				//int overflow = myatomicAdd16(&map[index]);
				//if(overflow)   myatomicAdd16(&map[mapSlice*mapSlice+index]);
			}

		}
	}
	ngood[id] += good;
	states[id] = state;
}


int main(int argc,char *argv[])
{
	if(0){
		float x = atof(argv[1]);
		float y = atof(argv[2]);
		printf("x %f y %f atan2(x,y) %f  C %.1f\n",x,y,myatan2(x,y),cryStep*myatan2(x,y) );
		return 0;
	}

	if(argc < 2){
		printf("usage simple threads block ngen seed R L r l\n");
		return 0;
	}
	printf("Detector: len %.1f radius %.3f rings %d crytals/ring %d zstep %.3f phistep %.3f (degrees)\n",
		detLen,detRadius,detRings,cryNum,crySize,360.0/cryNum);

	uint threads = 256; if(argc>1) threads = atoi(argv[1]);
	uint blocks = 1024; if(argc>2) blocks  = atoi(argv[2]);

	uint size = blocks*threads;
	int passes = 1;
	long long  ngen = 1000000;
	int ndo = atoi(argv[3]);
	if(ndo <1000) ngen *= (long long)ndo;
	else {
		passes = ndo/1000;
		ngen *= 1000ll;
	}
	uint tries = (ngen+size-1)/size;
	ngen = (long long)tries*(long long)size;

	std::random_device rd;
	long long seed = rd(); if (argc > 4) seed = atoi(argv[4]);

	Roi roi;
	roi.r.x = roiRadius - voxSize; //0.0f;     //20*voxSize; //0.3f*roiRadius;
	roi.r.y = roiRadius;           //voxSize;  //21*voxSize; //roiRadius;

	roi.z.x = crySize*detRings/2;  //0.0;
	roi.z.y =  roi.z.x+crySize;    //detLen;

	roi.phi.x = 0.0; //3.0f*cx::piby2<float>;  //cx::piby2<float>;                 //cx::piby2<float>;
	roi.phi.y = roi.phi.x+phiStep; //3.0f*cx::piby2<float>;

	roi2xyz(roi);

	// use XORWOW
	thrustDvec<curandState> state(size);  // this for curand_states

	thrustHvec<uint>       hits(detRings*cryNum);
	thrustDvec<uint>   dev_hits(detRings*cryNum);
	thrustHvec<uint>       vfill(detRings*voxNum*voxNum);
	thrustDvec<uint>   dev_vfill(detRings*voxNum*voxNum);
	thrustHvec<ushort>     sfill(detRings*voxNum*voxNum);
	thrustDvec<ushort> dev_sfill(detRings*voxNum*voxNum);
	thrustHvec<uint>       map(mapSlice*mapSlice);
	thrustDvec<uint>   dev_map(mapSlice*mapSlice);
	thrustHvec<uint>       spot(spotNphi*spotNz*mapSlice);
	thrustDvec<uint>   dev_spot(spotNphi*spotNz*mapSlice);

	thrustDvec<double> dev_good(size);
	cx::MYTimer tim;
	init_generator<<<blocks, threads>>>(seed,state.data().get());
	for(int k=0;k<passes;k++){
		//cylhits<<<blocks, threads >>>(dev_hits.data().get(), dev_vfill.data().get(), dev_good.data().get(), det, roi, state.data().get(), tries);
		cylhits<<<blocks, threads >>>(dev_hits.data().get(),dev_map.data().get(), dev_sfill.data().get(), dev_good.data().get(), roi, state.data().get(), tries);
	}
	checkCudaErrors( cudaPeekAtLastError() );
	checkCudaErrors( cudaDeviceSynchronize() );
	tim.add();
	find_spot<<<detRings/2,cryNum>>>(dev_map.data().get(),dev_spot.data().get(), roi);
	checkCudaErrors( cudaPeekAtLastError() );
	checkCudaErrors( cudaDeviceSynchronize() );

	double all_good = thrust::reduce(dev_good.begin(), dev_good.end());
	ngen *= (long long)passes;
	double eff = 100.0*all_good/(double)ngen;
	printf("ngen %lld good %.0f eff %.3f%% time %.3f ms\n",ngen,all_good,eff,tim.time());

	hits = dev_hits;
	//vfill = dev_vfill;
	sfill = dev_sfill;
	//cx::write_raw("fsim_roi_int.raw",vfill.data(),detRings*voxNum*voxNum);
	//cx::write_raw("fsim_roi_short.raw",sfill.data(),detRings*voxNum*voxNum);
	//cx::write_raw("fsim_hits_int.raw",hits.data(),detRings*cryNum);

	//map = dev_map;
	//cx::write_raw("fsim_map_int.raw",map.data(),mapSlice*mapSlice);
	spot = dev_spot;
	cx::write_raw("spot_map_int.raw",spot.data(),spotNphi*spotNz*mapSlice);

	return 0;
}